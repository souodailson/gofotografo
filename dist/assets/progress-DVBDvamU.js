import{r as f,j as i,bf as y,bh as m,R as I,a6 as v}from"./index-BjlYHH5u.js";var u="Progress",d=100,[E,D]=y(u),[j,w]=E(u),g=f.forwardRef((e,r)=>{const{__scopeProgress:n,value:o=null,max:a,getValueLabel:h=_,...$}=e;(a||a===0)&&!c(a)&&console.error(M(`${a}`,"Progress"));const s=c(a)?a:d;o!==null&&!p(o,s)&&console.error(V(`${o}`,"Progress"));const t=p(o,s)?o:null,R=l(t)?h(t,s):void 0;return i.jsx(j,{scope:n,value:t,max:s,children:i.jsx(m.div,{"aria-valuemax":s,"aria-valuemin":0,"aria-valuenow":l(t)?t:void 0,"aria-valuetext":R,role:"progressbar","data-state":N(t,s),"data-value":t??void 0,"data-max":s,...$,ref:r})})});g.displayName=u;var x="ProgressIndicator",P=f.forwardRef((e,r)=>{const{__scopeProgress:n,...o}=e,a=w(x,n);return i.jsx(m.div,{"data-state":N(a.value,a.max),"data-value":a.value??void 0,"data-max":a.max,...o,ref:r})});P.displayName=x;function _(e,r){return`${Math.round(e/r*100)}%`}function N(e,r){return e==null?"indeterminate":e===r?"complete":"loading"}function l(e){return typeof e=="number"}function c(e){return l(e)&&!isNaN(e)&&e>0}function p(e,r){return l(e)&&!isNaN(e)&&e<=r&&e>=0}function M(e,r){return`Invalid prop \`max\` of value \`${e}\` supplied to \`${r}\`. Only numbers greater than 0 are valid max values. Defaulting to \`${d}\`.`}function V(e,r){return`Invalid prop \`value\` of value \`${e}\` supplied to \`${r}\`. The \`value\` prop must be:
  - a positive number
  - less than the value passed to \`max\` (or ${d} if no \`max\` prop is set)
  - \`null\` or \`undefined\` if the progress is indeterminate.

Defaulting to \`null\`.`}var b=g,A=P;const S=I.forwardRef(({className:e,value:r,indicatorClassName:n,...o},a)=>i.jsx(b,{ref:a,className:v("relative h-4 w-full overflow-hidden rounded-full bg-secondary",e),...o,children:i.jsx(A,{className:v("h-full transition-all",n||"bg-primary"),style:{width:`${r||0}%`}})}));S.displayName=b.displayName;export{S as P};
